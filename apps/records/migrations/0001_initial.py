# Generated by Django 4.1.5 on 2023-03-27 13:31

import apps.records.models.student
import apps.records.models.teacher
import apps.records.models.user
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='StudentGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('grade', models.SmallIntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(8)])),
                ('name', models.CharField(max_length=30, verbose_name='Name')),
            ],
            options={
                'verbose_name': 'student group',
                'verbose_name_plural': 'student groups',
                'ordering': ['grade', 'name'],
                'unique_together': {('grade', 'name')},
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('username', models.CharField(blank=True, error_messages={'unique': 'A user with that username already exists.'}, help_text='150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(help_text='Required.', max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(help_text='Required.', max_length=150, verbose_name='last name')),
                ('role', models.PositiveSmallIntegerField(choices=[(1, 'Student'), (2, 'Teacher'), (3, 'Secretary'), (4, 'Admin')], default=1, editable=False, verbose_name='role')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'ordering': ['last_name', 'first_name'],
            },
            managers=[
                ('objects', apps.records.models.user.CustomUserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Student',
            fields=[
            ],
            options={
                'verbose_name': 'student',
                'verbose_name_plural': 'students',
                'permissions': [('reset_students_password', "Can reset Student's password")],
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('records.user',),
            managers=[
                ('objects', apps.records.models.student.StudentManager()),
            ],
        ),
        migrations.CreateModel(
            name='Teacher',
            fields=[
            ],
            options={
                'verbose_name': 'teacher',
                'verbose_name_plural': 'teachers',
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('records.user',),
            managers=[
                ('objects', apps.records.models.teacher.TeacherManager()),
            ],
        ),
        migrations.CreateModel(
            name='StudentGroupAssignment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_start', models.DateField(verbose_name='Start date')),
                ('date_end', models.DateField(verbose_name='End date')),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='assignments', to='records.studentgroup', verbose_name='Student group')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='assignments', to='records.student', verbose_name='Student')),
            ],
            options={
                'verbose_name': 'group assignment',
                'verbose_name_plural': 'group assignments',
            },
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('birth_date', models.DateField(blank=True, null=True, verbose_name='Birth date')),
                ('address', models.CharField(blank=True, max_length=50, verbose_name='Address')),
                ('zip_code', models.CharField(blank=True, max_length=10, verbose_name='ZIP code')),
                ('city', models.CharField(blank=True, max_length=50, verbose_name='City')),
                ('phone', models.CharField(blank=True, max_length=15, verbose_name='Phone number')),
                ('student', models.OneToOneField(editable=False, on_delete=django.db.models.deletion.CASCADE, related_name='profile', to='records.student')),
            ],
            options={
                'verbose_name': 'profile',
                'verbose_name_plural': 'profiles',
            },
        ),
    ]
